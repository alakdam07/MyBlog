{"version":3,"sources":["Api.js","ScrollToTop.js","Show.js","Form.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["logEntry","a","fetch","response","json","createLogEntry","entry","method","headers","body","JSON","stringify","ScrollToTop","props","state","is_visible","scrollComponent","this","document","addEventListener","e","toggleVisibility","window","pageYOffset","setState","scrollTo","top","behavior","className","onClick","scrollToTop","Component","Show","React","useState","data","setData","getEntries","logEntries","useEffect","dataList","reduce","acc","_id","createdAt","moment","name","author","description","sortedByStartDate","Object","keys","sort","b","map","task","index","Fragment","key","style","fontSize","calendar","Form","loading","setLoading","error","setError","changeHandler","target","id","value","handleSubmit","message","onSubmit","type","data-length","onChange","required","htmlFor","disabled","Nav","to","App","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.199000fc.chunk.js","sourcesContent":["export async function logEntry() {\r\n  const response = await fetch(\"/api\");\r\n  return response.json();\r\n}\r\n\r\nexport async function createLogEntry(entry) {\r\n  const response = await fetch(\"/api\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(entry)\r\n  });\r\n\r\n  return response.json();\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ScrollToTop extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      is_visible: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var scrollComponent = this;\r\n    document.addEventListener(\"scroll\", function(e) {\r\n      scrollComponent.toggleVisibility();\r\n    });\r\n  }\r\n\r\n  toggleVisibility() {\r\n    if (window.pageYOffset > 300) {\r\n      this.setState({\r\n        is_visible: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        is_visible: false\r\n      });\r\n    }\r\n  }\r\n\r\n  scrollToTop() {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { is_visible } = this.state;\r\n    return (\r\n      <div className=\"scroll-to-top\">\r\n        {is_visible && (\r\n          <button\r\n            className=\"btnScrollToTop \"\r\n            onClick={() => this.scrollToTop()}\r\n          >\r\n            <i className=\"material-icons\">arrow_upward</i>\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { logEntry } from \"./Api\";\r\nimport ScrollToTop from \"./ScrollToTop\";\r\nexport default function Show() {\r\n  const [data, setData] = React.useState([]);\r\n\r\n  const getEntries = async () => {\r\n    const logEntries = await logEntry();\r\n    //console.log(logEntries);\r\n    setData(logEntries);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getEntries();\r\n  }, []);\r\n\r\n  const dataList = data.reduce((acc, data) => {\r\n    acc[data._id] = {\r\n      createdAt: moment(data.createdAt),\r\n      name: data.name,\r\n      author: data.author,\r\n      description: data.description\r\n    };\r\n    return acc;\r\n  }, {});\r\n  const sortedByStartDate = Object.keys(dataList);\r\n\r\n  sortedByStartDate.sort(\r\n    (a, b) => dataList[b].createdAt - dataList[a].createdAt\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {sortedByStartDate.map((task, index) => {\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <div className=\"row\">\r\n              <div className=\"col s12 m6\">\r\n                <div className=\"card blue-grey darken-1\">\r\n                  <div className=\"card-content white-text\">\r\n                    <span className=\"card-title\">\r\n                      Topic: {dataList[task].name}\r\n                    </span>\r\n                    <span className=\"card-title\" style={{ fontSize: \"20px\" }}>\r\n                      Author: {dataList[task].author}\r\n                    </span>\r\n                    <p>{dataList[task].description}</p>\r\n                  </div>\r\n                  <div className=\"card-action\">\r\n                    Published at: {dataList[task].createdAt.calendar()}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <ScrollToTop />\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { createLogEntry } from \"./Api\";\r\nimport Show from \"./Show\";\r\nexport default function Form() {\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState(\"\");\r\n  const [state, setState] = React.useState({\r\n    name: \"\",\r\n    author: \"\",\r\n    description: \"\"\r\n  });\r\n\r\n  const changeHandler = e => {\r\n    setState({ ...state, [e.target.id]: e.target.value });\r\n  };\r\n  const handleSubmit = async e => {\r\n    //e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      await createLogEntry({\r\n        name: state.name,\r\n        author: state.author,\r\n        description: state.description\r\n      });\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n    setLoading(false);\r\n    setState({ name: \"\", author: \"\", description: \"\" });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"app\">\r\n        <div className=\"row\">\r\n          <form className=\"col s12\" onSubmit={handleSubmit}>\r\n            {error ? <p className=\"error\">{error}</p> : null}\r\n            <div className=\"row\">\r\n              <div className=\"input-field col s3\">\r\n                <input\r\n                  id=\"name\"\r\n                  type=\"text\"\r\n                  data-length=\"4\"\r\n                  onChange={changeHandler}\r\n                  value={state.name}\r\n                  required\r\n                />\r\n                <label htmlFor=\"input_text\">Topic</label>\r\n              </div>\r\n              <div className=\"input-field col s3\">\r\n                <input\r\n                  id=\"author\"\r\n                  type=\"text\"\r\n                  data-length=\"4\"\r\n                  onChange={changeHandler}\r\n                  value={state.author}\r\n                  required\r\n                />\r\n                <label htmlFor=\"input_text\">Author</label>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"input-field col s8\">\r\n                <textarea\r\n                  id=\"description\"\r\n                  className=\"materialize-textarea\"\r\n                  data-length=\"120\"\r\n                  onChange={changeHandler}\r\n                  value={state.description}\r\n                  required\r\n                ></textarea>\r\n                <label htmlFor=\"textarea2\">Description</label>\r\n              </div>\r\n            </div>\r\n            <button\r\n              className=\"btn waves-effect blue lighten-1\"\r\n              type=\"submit\"\r\n              name=\"action\"\r\n              disabled={loading}\r\n            >\r\n              {loading ? \"Loading...\" : \"Create Entry\"}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <Show />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nexport default function Nav() {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper purple darken-1\">\r\n        <div className=\"container\">\r\n          <ul>\r\n            <li>\r\n              <NavLink to=\"/\" className=\"text\">\r\n                Online Blog\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./Form\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Nav from \"./Nav\";\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Nav />\r\n        <Route>\r\n          <Switch>\r\n            <Route path=\"/\" component={Form} exact />\r\n          </Switch>\r\n        </Route>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}